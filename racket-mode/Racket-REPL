is a string
>>#
this
raw-html
(string-length raw-html)
raw-htl
raw-html
(parser
)
(parser (html->xexp raw-html)((raw)))
(shtml)
shtml
(srl:sxml->xml shtml)
shtml
curry
(define (add a b) (+ a b))
(add 1 2)
((curry add 1) 21)
(require racket/function)
((curry add 1) 21)
(define add1 (curry add 1))
(add1 2)
(let (((a b) (values '(foo . bar)))) a)
(let-values (((a b) (values '(foo . bar)))) a)
(let-values (((a b) (values '(foo  bar)))) a)
(let-values (((a b) (values 'foo  'bar)))) a)
(let-values (((a b) (values 'foo  'bar))) a)
(let-values (((a b) (values 'foo  'bar))) b)
(apply values '(foo . bar))
(apply values '(foo . bar))
regex-replace
(require racket/regex)
(require racket/regexp)
(require regexp)
(regexp-replace #rx"\s+" " lkajds    alskjdasd lkjasd" "")
(regexp-replace #rx"\\s+" " lkajds    alskjdasd lkjasd" "")
(regexp-replace* #rx"\\s+" " lkajds    alskjdasd lkjasd" "")
(regexp-replace* #rx"l" " lkajds    alskjdasd lkjasd" "")
(regexp-replace* "l" " lkajds    alskjdasd lkjasd" "")
(regexp-replace* "l" " lkajds    alskjdasd lkjasd" "")
(regexp-replace #rx"te" "liberte" "ty")
(regexp-replace #rx"te" "liberte" "ty")
(regexp-replace #rx"\\s+" "   now   " " ")
(regexp-replace #rx"\\s+" "   now   " ".")
(regexp-replace #rx"\\\s+" "   now   " ".")
(regexp-replace #rx"\\\\s+" "   now   " ".")
(regexp-replace #rx"\\s+" "   now   " #".")
(regexp-replace #rx"\\s+" #"   now   " #".")
(member 'a '(a b c))
(member '(a b c) 'a)
(member 'style '(style script))
(member 'html '(style script))
'(a . "")
(string-append (cdr '(a . "")) "foo")
(cons (car '(a . "") (string-append (cdr '(a . "")) "foo")))
(cons (car '(a . b)) (cdr '(a . b)))
(cons a b))
(cons 'a 'b)
,exit
,quit
(walk (html->xexp (open-input-string raw-html)))
(car (html->xexp (open-input-string raw-html)))
(symbol? (car (html->xexp (open-input-string raw-html))))
(car (html->xexp (open-input-string raw-html)))
(cdr (html->xexp (open-input-string raw-html)))
(car (cdr (html->xexp (open-input-string raw-html))))
(html->xexp (open-input-string raw-html))
            
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(walk (html->xexp (open-input-string raw-html)))
(html->xexp (open-input-string raw-html))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(cdr '((foo bar)))
(car '((foo bar)))
(car '((foo bar)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
\x1D56B
\#x1D56B
(make-hash)
(hash-set (make-hash) "veeeq" #\U0225a)
(hash-set (make-immutable-hash) "veeeq" #\U0225a)
html-enties
html-entities
(hash-ref "veeeq" html-entities)
(hash-ref html-entities "veeeq")
(make-string "foo " (hash-ref html-entities "veeeq"))
(string-append "foo " (hash-ref html-entities "veeeq"))
(format "~a" (hash-ref html-entities "veeeq"))
(string (hash-ref html-entities "veeeq"))
html-entities
(walk2 (html->xexp (open-input-string raw-html)))
(walk2 (html->xexp (open-input-string raw-html)))
,quit
(banner)
(banner)
(car '(a (@ (href https://tripwire.com)) tripwire))
(cadr '(a (@ (href https://tripwire.com)) tripwire))
(caadr '(a (@ (href https://tripwire.com)) tripwire))
(car '())
(first '())
(cdr '(a (@ (href https://tripwire.com)) tripwire))
(cadr (cdr '(a (@ (href https://tripwire.com)) tripwire)))
(car (cdr '(a (@ (href https://tripwire.com)) tripwire)))
(cadr (cdr '(a (@ (href https://tripwire.com)) tripwire)))
(caar (cdr '(a (@ (href https://tripwire.com)) tripwire)))
shtml
shtml
(cdr shtml)
(pair? (cdr shtml))
(caar (cdr (cdr shtml)))
(parse-attributes '(a (@ (href "/about")) "about"))
(car (cdr (a (@ (href "/about")) "about")))
(cdr (a (@ (href "/about")) "about"))
(cdr '(a (@ (href "/about")) "about"))
(car '())
(empty? '())
(nil? '())
(empty? '())
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(hash-ref (make-immutable-table '((href "/about"))))
(hash-ref (make-immutable-hash '((href "/about")) 'href))
(hash-ref (make-immutable-hash '((href "/about"))) 'href)
(apply make-immutable-hash '((href "/about")))
(apply make-immutable-hash '((href "/about")))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (@ (href "/about")) "about"))
(parse-attributes '(a (href "/about") "about"))
((make-html-parser) raw-html '())
((make-html-parser) raw-html '())
((make-html-parser #:start-element (Î» (name attrs seed) (printf "<~a ~a>~%" name attrs) seed)) raw-html '())
(cdr '((html (head (title "Got Title")))))
(chrome-driver-available)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
exn:fail:network
exn:fail:network
(chrome-driver-available?)
(chrome-driver-available?)
(string "a " "b")
(make-string "a a" "b")
(make-string "a a" "b")
(chrome-driver-available?)
(chrome-driver-available?)
(chrome-driver-available?)
(main)
(main)
(main)
(main)
(main)
(main)
(main)
(main)
(main)
(main "https://devtrope.com")
(main "https://www.tripwire.com")
(main "https://www.google.com")
(main "https://www.google.com")
(main "https://www.google.com")
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://zentrope.com" callback)
(crawl! "https://devtrope.com" callback)
(find-mimetype "https://devtrope.com")
(find-mimetype "https://devtrope.com")
(find-mimetype "https://devtrope.com")
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(crawl! "https://devtrope.com" callback)
(find-mimetype "https://www.tripwire.com/state-of-security/contributors/lamar-bailey/page/3/")
(find-mimetype "https://www.tripwire.com/state-of-security/contributors/lamar-bailey/page/3/")
(find-mimetype "https://www.tripwire.com/")
(find-mimetype "https://www.tripwire.com")
(find-mimetype "https://tripwire.com")
(find-mimetype "http://tripwire.com")
(find-mimetype "http://tripwire.com")
