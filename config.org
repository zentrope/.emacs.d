#+title: Emacs Configuration
#+author: Keith Irwin
#+startup: content

* Applications

Customize applications run within an Emacs context, like IRC, etc.

** erc (irc client)

I like to close Emacs more often than IRC, but I still use this. Note
that theme adjustments are above, not included here.

#+begin_src emacs-lisp :tangle yes
  (use-package erc-hl-nicks
    :ensure t)

  (use-package erc
    :ensure t
    :config
    (defun kfi-erc-mode-hook ()
      (make-local-variable 'global-hl-line-mode)
      (setq global-hl-line-mode nil))

    (add-hook 'erc-mode-hook 'kfi-erc-mode-hook)

    ;; Not sure if this is necessary.
    (progn (add-to-list 'erc-modules 'truncate)
           (add-to-list 'erc-modules 'scrolltobottom)
           (erc-update-modules))

    (erc-scrolltobottom-mode 1)

    (setq erc-hide-list '("JOIN" "PART" "QUIT"))
    (setq erc-fill-prefix "    ")
    (setq erc-prompt (lambda () (concat "\n" (buffer-name) " >")))

    (setq erc-fill-column 78)
    (setq erc-scroll-to-bottom -2)
    (setq erc-truncate-buffer-on-save t)
    (setq erc-max-buffer-size 30000)

    (defvar erc-insert-post-hook)
    (add-hook 'erc-insert-post-hook
              'erc-truncate-buffer)
    (setq erc-truncate-buffer-on-save t))
#+end_src

* Extensions

Packages for customizing Emacs itself.

** command-log-mode

Cool thing that displays all your commands as you type them. It's for
demos, but I just like it for fun.

#+begin_src emacs-lisp :tangle yes
  (use-package command-log-mode
    :ensure t)
#+end_src

** dirtree

#+begin_src emacs-lisp :tangle yes
  (use-package dirtree
    :ensure t)
#+end_src

** dired-details

Shortens up the dired buffer, removing dates, file-sizes and so
on. Most of the time I just want a list of files.

#+begin_src emacs-lisp :tangle yes
  (use-package dired-details
    :ensure t
    :config
    (setq-default dired-details-hidden-string "--- ")
    (dired-details-install))
#+end_src

** ivy-mode, swiper, counsel

This is yet another version of ~ido~ or ~helm~ which claims to be
simpler and cleaner than all the others. I. Want. To. Believe.

Here's a link for integrating OSX's ~mdfind~ or Spotlight Search into
~counsel~.

 - [[http://pragmaticemacs.com/emacs/super-spotlight-search-with-counsel/][Super spotlight search with counsel]]

#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag))
    ;;(global-set-key (kbd "C-x l") 'counsel-locate)
    ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox))
#+end_src

** helm

Trying out [[https://github.com/emacs-helm/helm][Helm]] which is a world unto itself. A much more
sophisticated "ido" kind of thing.

#+begin_src emacs-lisp :tangle yes
  (use-package helm
    ;; http://tuhdo.github.io/helm-intro.html#sec-31
    :disabled t
    :ensure t
    :diminish helm-mode
    :config (progn

              (require 'helm-config)

              (use-package helm-projectile
                :ensure t
                :commands helm-projectile
                :bind ("s-p" . helm-projectile))

              (use-package helm-ag
                :ensure t
                :config
                (setq helm-ag-base-command
                      "/usr/local/bin/ag --nocolor --nogroup --ignore-case")
                (setq helm-ag-command-option "--all-text")
                (setq helm-ag-insert-at-point 'symbol))

              (setq helm-locate-command "mdfind -interpret -name %s %s"
                    helm-ff-newfile-prompt-p nil
                    helm-M-x-fuzzy-match t)
              (helm-mode)
              (helm-autoresize-mode t)
              ;; rebind tab to do persistent action
              (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
              ;; make TAB works in terminal
              (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
              ;; list actions using C-z
              (define-key helm-map (kbd "C-z")  'helm-select-action)
              (bind-key (kbd "M-x") 'helm-M-x))

    :bind (("C-c h" . helm-command-prefix)
           ("C-x b" . helm-mini)
           ("C-`" . helm-resume)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)))
#+end_src

** ido/smex

Ido and smex comprise a more Emacs-y command and file completion mode
which I might return to if helm makes my eyes bleed too much.

#+begin_src emacs-lisp :tangle yes
  (use-package ido
    :init
    (progn (ido-mode 1)

           (setq ido-enable-flex-matching t)
           (setq ido-everywhere t)

           (use-package ido-ubiquitous
             :ensure t
             :init (ido-ubiquitous-mode))
           (use-package ido-vertical-mode
             :ensure t
             :init (ido-vertical-mode 1))))

  (use-package smex
    :disabled t
    :ensure t
    :bind ("M-x" . smex))
#+end_src

* Program Facilities

A bunch of stuff broadly applicable to any programming language
environment.

** yasnippets

Starting to use snippets just a little, mainly in markup languages.

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs (list (concat user-emacs-directory "snippets/")
                                 yas-installed-snippets-dir))
    (yas-global-mode 1))
#+end_src

** projectile

[[https://github.com/bbatsov/projectile][Projectile]] has become increasingly useful especially for front-end web
application development which tends towards lots of files.

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :commands projectile-global-mode
    :config
    (setq projectile-completion-system 'ivy))
#+end_src

** dash

Trying this out. I use [[https://kapeli.com/dash][Dash]] a lot, especially when I don't know the
name of something. This package lets you point at something and look
it up, which is more handy for reading other peoples' code.

#+begin_src emacs-lisp :tangle yes
  (use-package dash-at-point
    :ensure t
    :bind (("s-D"     . dash-at-point)
           ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** magit

[[http://magit.vc][Magit]] is a super nice Git client. Feels like the command line, but has
nice visual components. In a lot of ways, Emacs seems like an
alternate reality where the Mac-like GUI universe never happened and
thus killed non-GUI innovation.

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :config
    ;; Courtesy Magnars
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))

    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

    (global-set-key (kbd "C-c g") 'magit-status)
    (global-set-key (kbd "C-c l") 'magit-log))
#+end_src

** paredit

Paredit is a transformative thought technology in the same way Lisp
is.

#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :ensure t)
#+end_src

** company

Cider depends on company mode for completion. I'm not a big fan of
completion most of the time. I always turn it off in IDEs, which is
why I end up turning any IDE I use into an editor.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t)
#+end_src

** linum-mode

Occasionally useful. I leave this at the default: off. There are some
theme customizations above.

#+begin_src emacs-lisp :tangle yes
  (use-package linum
    :ensure t
    :config
    (setq linum-format "%4d "))
#+end_src

* Web Programming

** web-mode

#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    :mode ("\\.html?\\'" "\\.js?\\'" "\\.jsx$")
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)
    (setq web-mode-content-types
          (cons '("jsx" . "\\.js\\'") web-mode-content-types))
    (set-face-attribute 'web-mode-html-tag-face nil :foreground "cornflowerblue")
    (set-face-attribute 'web-mode-html-tag-bracket-face nil :foreground "goldenrod"))
#+end_src

** css-mode

#+begin_src emacs-lisp :tangle yes
  (use-package css-mode
    :ensure t
    :config
    (setq css-indent-offset 2)
    (add-hook 'css-mode-hook '(lambda ()
                                (local-set-key (kbd "RET") 'newline-and-indent))))
#+end_src

** restclient

Handy mode for running raw web requests. Alas, not particularly good
for web-sockets.

#+begin_src emacs-lisp :tangle yes
  (use-package restclient
    :ensure t)
#+end_src

* Programming Languages

** clojure

I spend most of my time in Clojure and ClojureScript.

*** paren-face

Diming the parenthesis really emphasizes the semantics of the
expressions over their syntax. Right?

#+begin_src emacs-lisp :tangle yes
  (use-package paren-face
    :ensure t
    :config
    (global-paren-face-mode 1))
#+end_src

*** clojure-mode

#+begin_src emacs-lisp :tangle yes
  (use-package clojure-mode-extra-font-locking
    :ensure t)

  (use-package clojure-mode
    :ensure t
    :config
    (setq clojure-defun-style-default-indent nil)

    (defconst kfi-clj-anonfn
      `(("\\(#\\)("
         (0 (progn (compose-region (match-beginning 1)
                                   (match-end 1) "ƒ")
                   nil)))))

    (font-lock-add-keywords 'clojure-mode       kfi-clj-anonfn)
    (font-lock-add-keywords 'clojurescript-mode kfi-clj-anonfn)
    (add-hook 'clojure-mode-hook 'prettify-symbols-mode)
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'clojure-mode-hook 'cider-mode))
#+end_src

References:

 - [[http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html?source=rss][pretty symbols]]

*** cider

The Clojure IDE. A ton of features, most of which I can ignore.

#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :ensure t
    :config
    (setq cider-font-lock-dynamically '(macro core function var))
    (setq cider-repl-use-clojure-font-lock t)
    (setq cider-overlays-use-font-lock t)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'company-mode)
    (add-hook 'cider-mode-hook 'company-mode)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (setq cider-repl-use-pretty-printing 1))
#+end_src

* Text Processing

** org-mode

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-html-doctype "html5")
    (setq org-export-with-smart-quotes t)
    (setq org-replace-disputed-keys t)
    (setq org-html-head "<style>html { font-family: helvetica, sans-serif; }</style>")
    (setq org-src-fontify-natively t)
    (use-package org-bullets
      :disabled t
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+end_src

** markdown

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode ("\\.markdown$" "\\.md$"
           "\\.mkd$"
           "\\.mkdn$"
           "\\.mdown$"
           "\\.mdwn$" "\\.text$")
    :config
    (defun kfi-markdown-mode-hook ()
      (auto-fill-mode 1))

    (add-hook 'markdown-mode-hook 'kfi-markdown-mode-hook))
#+end_src

* Appearance

** dark: atom-one-dark

This is my main theme. Bright where it needs to be, but nowhere
else. I've added a command =kfi-dark= to invoke the theme after
invoking =kfi-light= (see below).

#+begin_src emacs-lisp :tangle yes
  (use-package atom-one-dark-theme
    :if window-system
    :ensure t
    :config
    (defun kfi-dark ()
      (interactive)
      (load-theme 'atom-one-dark t)
      (set-face-attribute 'fringe nil :background "#111711")
      (set-face-attribute 'default nil :background "#111711")
      (set-face-attribute 'mode-line nil
                          :foreground "#ccc"
                          :background "#374350"
                          :underline nil
                          :family "Monaco" :height 100 :weight 'normal
                          :box '(:line-width 2 :color "#374350" :style nil))

      (set-face-attribute 'mode-line-inactive nil :foreground "gray60"
                          :background "gray15" :family "Menlo" :height 100
                          :weight 'normal :italic nil
                          :box '(:line-width 2 :color "gray15" :style nil))

      ;; Linum customization
      (set-face-attribute 'linum nil :foreground "#333")

      ;; ERC customizations
      (set-face-attribute 'erc-prompt-face nil
                          :foreground "darkorange" :background "#111711")
      (set-face-attribute 'erc-timestamp-face nil
                          :foreground "gray25" :background "#111711"))

    (kfi-dark))
#+end_src

** light: default

Sometimes I want the default white Emacs theme, so:

#+begin_src emacs-lisp :tangle yes
  (defun kfi-light ()
    (interactive)
    (disable-theme 'atom-one-dark)
    (set-face-attribute 'fringe nil :background "#fff")
    (set-face-attribute 'default nil :background "#fff")
    (set-face-background hl-line-face "gray90")

    (set-face-attribute 'mode-line nil
                        :foreground "dodgerblue"
                        :background "gray90"
                        :underline nil
                        :family "Monaco" :height 100 :weight 'normal
                        :box '(:line-width 2 :color "gray90" :style nil))

    (set-face-attribute 'mode-line-inactive nil :foreground "gray60"
                        :background "#f2f2f2" :family "Menlo" :height 100
                        :weight 'normal :italic nil
                        :box '(:line-width 2 :color "#f2f2f2" :style nil))

    ;; Linum customization
    (set-face-attribute 'linum nil :foreground "#ccc")

    ;; ERC customizations
    (set-face-attribute 'erc-prompt-face nil
                        :foreground "dodgerblue" :background "white")
    (set-face-attribute 'erc-timestamp-face nil
                        :foreground "dodgerblue" :background "white"))
#+end_src
