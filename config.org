#+title: Emacs Configuration
#+author: Keith Irwin
#+startup: content

* Appearance

This is my main theme. Bright where it needs to be, but nowhere else.

#+begin_src emacs-lisp :tangle yes
      (use-package atom-one-dark-theme
        :if window-system
        :ensure t
        :config
        (progn
          (load-theme 'atom-one-dark t)
          (set-face-attribute 'fringe nil :background "#000000")
          (set-face-attribute 'fringe nil :background "#111711")
          (set-face-attribute 'default nil :background "#111711")
          ;; This gives an error, so,
          ;; TODO: set hl-line-face when move to org is complete
          ;; (set-face-background hl-line-face "gray13")
          (set-face-attribute 'mode-line nil
                              :foreground "#ccc"
                              :background "#374350"
                              :underline nil
                              :family "Monaco" :height 100 :weight 'normal
                              :box '(:line-width 2 :color "#374350" :style nil))

          (set-face-attribute 'mode-line-inactive nil :foreground "gray60"
                              :background "gray15" :family "Menlo" :height 100
                              :weight 'normal :italic nil
                              :box '(:line-width 2 :color "gray15" :style nil))))
#+end_src

Cyberpunk is disabled, but it has some nice things.

#+begin_src emacs-lisp :tangle yes
  (use-package cyberpunk-theme
    :disabled t
    :ensure t
    :config
    (load-theme 'cyberpunk t)
    (set-face-attribute 'mode-line nil
                        :box '(:line-width 2 :color "#333333" :style nil))
    (set-face-attribute `mode-line-inactive nil
                        :box '(:line-width 2 :color "#1a1a1a" :style nil)))
#+end_src

Another kinda nice theme, but still not quite for me.

#+begin_src emacs-lisp :tangle yes
  (use-package seti-theme
    :disabled t
    :ensure t
    :config
    (load-theme 'seti t))
#+end_src

* Emacs Augmentation

Packages for customizing Emacs itself.

Shortens up the dired buffer, removing dates, file-sizes and so
on. Most of the time I just want a list of files.

#+begin_src emacs-lisp :tangle yes
  (use-package dired-details
    :ensure t
    :config
    (setq-default dired-details-hidden-string "--- ")
    (dired-details-install))
#+end_src

Trying out [[https://github.com/emacs-helm/helm][Helm]] which is a world unto itself. A much more
sophisticated "ido" kind of thing.

#+begin_src emacs-lisp :tangle yes
  (use-package helm
    ;; http://tuhdo.github.io/helm-intro.html#sec-31
    :ensure t
    :diminish helm-mode
    :config (progn

              (require 'helm-config)

              (use-package helm-projectile
                :ensure t
                :commands helm-projectile
                :bind ("s-p" . helm-projectile))

              (use-package helm-ag
                :ensure t
                :config
                (setq helm-ag-base-command
                      "/usr/local/bin/ag --nocolor --nogroup --ignore-case")
                (setq helm-ag-command-option "--all-text")
                (setq helm-ag-insert-at-point 'symbol))

              (setq helm-locate-command "mdfind -interpret -name %s %s"
                    helm-ff-newfile-prompt-p nil
                    helm-M-x-fuzzy-match t)
              (helm-mode)
              (helm-autoresize-mode t)
              ;; rebind tab to do persistent action
              (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
              ;; make TAB works in terminal
              (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
              ;; list actions using C-z
              (define-key helm-map (kbd "C-z")  'helm-select-action)
              (bind-key (kbd "M-x") 'helm-M-x))

    :bind (("C-c h" . helm-command-prefix)
           ("C-x b" . helm-mini)
           ("C-`" . helm-resume)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)))
#+end_src

Ido and smex comprise a more Emacs-y command and file completion mode
which I might return to if helm makes my eyes bleed too much.

#+begin_src emacs-lisp :tangle yes
  (use-package ido
    :init
    (progn (ido-mode 1)

           (setq ido-enable-flex-matching t)
           (setq ido-everywhere t)

           (use-package ido-ubiquitous
             :ensure t
             :init (ido-ubiquitous-mode))
           (use-package ido-vertical-mode
             :ensure t
             :init (ido-vertical-mode 1))))

  (use-package smex
    :disabled t
    :ensure t
    :bind ("M-x" . smex))
#+end_src

* Web Programming

** web-mode

#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    :mode ("\\.html?\\'" "\\.js?\\'" "\\.jsx$")
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)
    (setq web-mode-content-types
          (cons '("jsx" . "\\.js\\'") web-mode-content-types))
    (set-face-attribute 'web-mode-html-tag-face nil :foreground "cornflowerblue")
    (set-face-attribute 'web-mode-html-tag-bracket-face nil :foreground "goldenrod"))
#+end_src

** CSS Mode

#+begin_src emacs-lisp :tangle yes
  (use-package css-mode
    :ensure t
    :config
    (setq css-indent-offset 2)
    (add-hook 'css-mode-hook '(lambda ()
                                (local-set-key (kbd "RET") 'newline-and-indent))))
#+end_src

** Rest client

Handy mode for running raw web requests. Alas, not particularly good
for web-sockets.

#+begin_src emacs-lisp :tangle yes
  (use-package restclient
    :ensure t)
#+end_src

* Languages

** Convenient augmentation

Starting to use snippets just a little, mainly in markup
languages.

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+end_src

[[https://github.com/bbatsov/projectile][Projectile]] has become increasingly useful especially for front-end web
application development which tends towards lots of files.

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :commands projectile-global-mode)
#+end_src

Trying this out. I use [[https://kapeli.com/dash][Dash]] a lot, especially when I don't know the
name of something. This package lets you point at something and look
it up, which is more handy for reading other peoples' code.

#+begin_src emacs-lisp :tangle yes
  (use-package dash-at-point
    :ensure t
    :bind (("s-D"     . dash-at-point)
           ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Clojure

The Clojure IDE. A ton of features, most of which I can ignore.

#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :ensure t
    :config
    (setq cider-font-lock-dynamically '(macro core function var))
    (setq cider-repl-use-clojure-font-lock t)
    (setq cider-overlays-use-font-lock t)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'company-mode)
    (add-hook 'cider-mode-hook 'company-mode)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

    (add-hook 'clojure-mode-hook 'cider-mode)
    (setq cider-repl-use-pretty-printing 1))
#+end_src

Paredit is a transformative thought technology in the same way Lisp
is.

#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :ensure t)
#+end_src

Cider depends on company mode for completion. I'm not a big fan of
completion most of the time. I always turn it off in IDEs, which is
why I end up turning any IDE I use into an editor.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t)
#+end_src

* Text Processing

** Orgmode

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-html-doctype "html5")
    (setq org-export-with-smart-quotes t)
    (setq org-replace-disputed-keys t)
    (setq org-html-head "<style>html { font-family: helvetica, sans-serif; }</style>")
    (setq org-src-fontify-natively t)
    (use-package org-bullets
      :disabled t
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+end_src

** Markdown

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode ("\\.markdown$" "\\.md$"
           "\\.mkd$"
           "\\.mkdn$"
           "\\.mdown$"
           "\\.mdwn$" "\\.text$")
    :config
    (defun kfi-markdown-mode-hook ()
      (auto-fill-mode 1))

    (add-hook 'markdown-mode-hook 'kfi-markdown-mode-hook))
#+end_src
